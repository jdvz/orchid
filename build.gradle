group 'club.orchid'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }

    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE')
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
    }
}

apply plugin: 'org.flywaydb.flyway'
apply plugin: 'propdeps'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
}

flyway {
    url='jdbc:mysql://localhost/orchid_db?useUnicode=true&amp;characterEncoding=utf8'
    user='orchid'
    password='orchid'
    driver='com.mysql.jdbc.Driver'
    encoding = 'utf8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.mainClassName = 'club.orchid.MainApp'

sourceSets {
    main {
        output.resourcesDir = 'build/classes/main'
        output.classesDir = 'build/classes/main'
        groovy {
            srcDir 'src/main/groovy'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        output.resourcesDir = 'build/classes/test'
        output.classesDir = 'build/classes/test'
        groovy {
            srcDir 'src/test/groovy'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

configure(allprojects) { project ->
    group = 'ru.club.orchids'
    version = qualifyVersionIfNecessary(version)

    ext.servletApiVersion = '2.5'
    ext.groovyVersion = '2.3.11'
    ext.antVersion = '1.8.4'
    ext.commonsDbcp2Version = '2.1.1'
    ext.springVersion = '4.2.4.RELEASE'
    ext.springSecurityVersion = '4.0.3.RELEASE'
    ext.jodaVersion = '2.2'
    ext.commonsLoggingVersion = '1.2'
    ext.commonsCodecVersion = '1.10'
    ext.aspectjVersion = '1.8.8'
    ext.ioptVersion = '4.9'
    ext.log4jVersion = '1.2.17'
    ext.logbackVersion = '0.9.26'
    ext.servletVersion = '1.1.2'
    ext.junitVersion = '4.11'
}

configurations {
    providedRuntime
    custom.exclude group: 'log4j'
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'

    compile "org.apache.commons:commons-dbcp2:${commonsDbcp2Version}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"
    compile "org.springframework.security:spring-security-core:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.thymeleaf:thymeleaf-spring4'
    compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4'
    compile 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    compile 'org.springframework.boot:spring-boot-devtools'

    compile 'mysql:mysql-connector-java:5.1.38'

    compile "joda-time:joda-time:${jodaVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
//    compile "commons-logging:commons-logging:${commonsLoggingVersion}"
    optional "commons-codec:commons-codec:${commonsCodecVersion}"
    optional "org.aspectj:aspectjweaver:${aspectjVersion}"
    optional "net.sf.jopt-simple:jopt-simple:${ioptVersion}"
//    optional "log4j:log4j:${log4jVersion}"
    runtime "javax.servlet:jstl:${servletVersion}"
    testCompile group: 'junit', name: 'junit', version: junitVersion

    custom configurations.runtime
}

def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}

bootRun {
    addResources = true
}

bootRepackage {
    mainClass = 'club.orchid.MainApp'
}

task clientJar(type: Jar) {
    appendix = 'client'
    from sourceSets.main.output
}

task clientBoot(type: BootRepackage, dependsOn: clientJar) {
    mainClass =  'orchids.MainApp'
    withJarTask = clientJar
    customConfiguration = 'custom'
}

//task debug(type: BootRepackage, dependsOn:) {
//    applicationDefaultJvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
//}
